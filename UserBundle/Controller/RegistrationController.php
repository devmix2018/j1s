<?php/* * This file is part of the FOSUserBundle package. * * (c) FriendsOfSymfony <http://friendsofsymfony.github.com/> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */namespace Tuni\UserBundle\Controller;use Symfony\Component\DependencyInjection\ContainerAware;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpFoundation\RedirectResponse;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Symfony\Component\Security\Core\Exception\AccessDeniedException;use Symfony\Component\Security\Core\Exception\AccountStatusException;use FOS\UserBundle\Model\UserInterface;use FOS\UserBundle\Mailer\MailerInterface;use FOS\UserBundle\Util\TokenGeneratorInterface;/** * Controller managing the registration * * @author Thibault Duplessis <thibault.duplessis@gmail.com> * @author Christophe Coevoet <stof@notk.org> */class RegistrationController extends ContainerAware{           public function registerAction()    {        $form = $this->container->get('fos_user.registration.form');        $formHandler = $this->container->get('fos_user.registration.form.handler');        $confirmationEnabled = $this->container->getParameter('fos_user.registration.confirmation.enabled');        $process = $formHandler->process($confirmationEnabled);        if ($process) {            $user = $form->getData();            $authUser = false;            if ($confirmationEnabled) {                $this->container->get('session')->set('fos_user_send_confirmation_email/email', $user->getEmail());                $route = 'fos_user_registration_check_email';            } else {                $authUser = true;                 $route = 'fos_user_registration_confirmed';                if($this->container->get('security.context')->isGranted('ROLE_ADMIN'))$route = 'tuni_admin_liste_admins';                           }            $this->setFlash('fos_user_success', 'registration.flash.user_created');            $url = $this->container->get('router')->generate($route);            $response = new RedirectResponse($url);            if ($authUser && !$this->container->get('security.context')->isGranted('ROLE_ADMIN')) {                $this->authenticateUser($user, $response);            }            return $response;        }        return $this->container->get('templating')->renderResponse('FOSUserBundle:Registration:register.html.'.$this->getEngine(), array(                'form' => $form->createView(),'page'=>'add_Administrator'        ));    }    /**     * Tell the user to check his email provider     */    public function checkEmailAction()    {    $mailer=$this->container->get('fos_user.mailer');         $tokenGenerator=$this->container->get('fos_user.util.token_generator');        $email = $this->container->get('session')->get('fos_user_send_confirmation_email/email');        $this->container->get('session')->remove('fos_user_send_confirmation_email/email');        $user = $this->container->get('fos_user.user_manager')->findUserByEmail($email);        if (null === $user) {            $_SESSION['error_page'] = 'l\'utilisateur avec l\'email '.$email.' n\'existe pas';            return new RedirectResponse($this->container->get('router')->generate("tuni_annonce_error_page"));            //throw new NotFoundHttpException(sprintf('The user with email "%s" does not exist', $email));        }                if (null === $user->getConfirmationToken()) {                $user->setConfirmationToken($tokenGenerator->generateToken());                $this->container->get('fos_user.user_manager')->updateUser($user);            }                      $mailer->sendConfirmationEmailMessage($user);                                   return $this->container->get('templating')->renderResponse('FOSUserBundle:Registration:checkEmailMembre.html.'.$this->getEngine(),array_merge($this->init(),  array(            'user' => $user,        )));     }    /**     * Receive the confirmation token from user email provider, login the user     */    public function confirmAction($token)    {        $user = $this->container->get('fos_user.user_manager')->findUserByConfirmationToken($token);                if (null === $user) {            $_SESSION['error_page'] = 'l\'utilisateur avec confirmation token '.$token.' n\'existe pas';            return new RedirectResponse($this->container->get('router')->generate("tuni_annonce_error_page"));            //throw new NotFoundHttpException(sprintf('The user with confirmation token "%s" does not exist', $token));        }        $user->setConfirmationToken(null);        $user->setEnabled(true);        $user->setLastLogin(new \DateTime());        $this->container->get('fos_user.user_manager')->updateUser($user);        $response = new RedirectResponse($this->container->get('router')->generate('fos_user_registration_confirmed'));        $this->authenticateUser($user, $response);        return $response;    }    /**     * Tell the user his account is now confirmed     */    public function confirmedAction()    {        $user = $this->container->get('security.context')->getToken()->getUser();        if (!is_object($user) || !$user instanceof UserInterface) {             $_SESSION['error_page'] = 'l\'utilisateur n\'a pas le droit d\'accéder à cette section';            return new RedirectResponse($this->container->get('router')->generate("tuni_annonce_error_page"));            //throw new AccessDeniedException('This user does not have access to this section.');        }        return $this->container->get('templating')->renderResponse('FOSUserBundle:Registration:confirmedMembre.html.'.$this->getEngine(),array_merge($this->init(),  array(            'user' => $user,        )));    }       /**     * Authenticate a user with Symfony Security     *     * @param \FOS\UserBundle\Model\UserInterface        $user     * @param \Symfony\Component\HttpFoundation\Response $response     */    protected function authenticateUser(UserInterface $user, Response $response)    {        try {            $this->container->get('fos_user.security.login_manager')->loginUser(                $this->container->getParameter('fos_user.firewall_name'),                $user,                $response);        } catch (AccountStatusException $ex) {            // We simply do not authenticate users which do not pass the user            // checker (not enabled, expired, etc.).        }    }    /**     * @param string $action     * @param string $value     */    protected function setFlash($action, $value)    {        $this->container->get('session')->getFlashBag()->set($action, $value);    }    protected function getEngine()    {        return $this->container->getParameter('fos_user.template.engine');    } public function init(){        $em = $this->getDoctrine()->getManager();        $repository = $this->getDoctrine()                                        ->getManager()                                        ->getRepository('TuniAnnonceBundle:Temoignage');                          $Temoignages=$repository->findBy(array('isPublier' => TRUE));            $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();                 $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findAll();            $Menus = $em->getRepository('TuniAnnonceBundle:Menu')->findAll();                     $Slides = $em->getRepository('TuniAnnonceBundle:Slider')->findAll();$Socials = $em->getRepository('TuniAnnonceBundle:Social')->findAll();              $Regions = $em->getRepository('TuniAnnonceBundle:Region')->findAll();         $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 1    ORDER BY a.id DESC    ");        $query->setMaxResults(3);        $lastAnnonces = $query                ->getResult();        $query22 = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 2    ORDER BY a.id DESC    ");        $query22->setMaxResults(3);        $lastAnnonces22 = $query22                ->getResult();        $membre = NULL;        if ($this->container->get('security.context')->isGranted('ROLE_USER')) {            //User is logged in                $user = $this->container->get('security.context')->getToken()->getUser();            $id = $user->getId();            $membre = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $id));        }        return array('membre' => $membre, 'Categories' => $Categories, 'Menus' => $Menus, 'Slides' => $Slides, 'Socials' => $Socials, 'Regions' => $Regions,            'SousCategories' => $SousCategories,            'Temoignages' => $Temoignages,            'lastAnnonces' => $lastAnnonces,            'lastAnnonces22' => $lastAnnonces22                                                                        );    }     public function getDoctrine() {    if (!$this->container->has('doctrine')) {            throw new \LogicException('The DoctrineBundle is not registered in your application.'); }     return $this->container->get('doctrine'); } }