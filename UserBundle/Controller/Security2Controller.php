<?php/* * This file is part of the FOSUserBundle package. * * (c) FriendsOfSymfony <http://friendsofsymfony.github.com/> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */namespace Tuni\UserBundle\Controller;use Symfony\Component\DependencyInjection\ContainerAware;use Symfony\Component\Security\Core\SecurityContext;use FOS\UserBundle\Controller\SecurityController as BaseController;use Tuni\AnnonceBundle\Entity\Membre;use Tuni\AnnonceBundle\Entity\Utilisateur;use Tuni\AnnonceBundle\Form\MembreType;use Tuni\AnnonceBundle\Form\UtilisateurType;class Security2Controller extends ContainerAware {    public function getRefererParams() {        $request = $this->container->get('request');        //$request = $this->getRequest();        $referer = $request->headers->get('referer');        $baseUrl = $request->getBaseUrl();        $lastPath = substr($referer, strpos($referer, $baseUrl) + strlen($baseUrl));        return $this->container->get('router')->getMatcher()->match($lastPath);    }    /**     * Shortcut to return the Doctrine Registry service.     *     * @return Registry     *     * @throws \LogicException If DoctrineBundle is not available     */    public function getDoctrine() {        if (!$this->container->has('doctrine')) {            throw new \LogicException('The DoctrineBundle is not registered in your application.');        }        return $this->container->get('doctrine');    }    public function loginAction($type) {        $errorcompte=NULL;        $request = $this->container->get('request');        /* @var $request \Symfony\Component\HttpFoundation\Request */        $session = $request->getSession();        /* @var $session \Symfony\Component\HttpFoundation\Session */        //$request->setLocale($request->query->get('locale'));        // get the error if any (works with forward and redirect -- see below)        if ($request->attributes->has(SecurityContext::AUTHENTICATION_ERROR)) {            $error = $request->attributes->get(SecurityContext::AUTHENTICATION_ERROR);            $_SESSION['login'] = $error;            $params = $this->getRefererParams();            return new RedirectResponse($this->container->get('router')->generate($params['_route']));        } elseif (null !== $session && $session->has(SecurityContext::AUTHENTICATION_ERROR)) {            $error = $session->get(SecurityContext::AUTHENTICATION_ERROR);            $session->remove(SecurityContext::AUTHENTICATION_ERROR);            $params = $this->getRefererParams();            $_SESSION['login'] = $error;            return new RedirectResponse($this->container->get('router')->generate($params['_route']));        } else {            $error = '';        }        if ($error) {            // TODO: this is a potential security risk (see http://trac.symfony-project.org/ticket/9523)            $error = $error->getMessage();        }        if (isset($_SESSION['login'])) {            $error = $_SESSION['login'];            unset($_SESSION['login']);        }        // last username entered by the user        $lastUsername = (null === $session) ? '' : $session->get(SecurityContext::LAST_USERNAME);        $csrfToken = $this->container->get('form.csrf_provider')->generateCsrfToken('authenticate');        $typeRef = 1;        if ($type == "Administrateur") {            $typeRef = 0;        }        if ($typeRef == 1) {            $entity = new Membre();            $formMembre = $this->container->get('form.factory')->create(new MembreType(), $entity);            $Utilisateur = new Utilisateur();            $form = $this->container->get('form.factory')->create(new UtilisateurType(), $Utilisateur);            $em = $this->getDoctrine()->getManager();            $repository = $this->getDoctrine()                    ->getManager()                    ->getRepository('TuniAnnonceBundle:Temoignage');            $Temoignages = $repository->findBy(array('isPublier' => TRUE));            $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();            $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findAll();            $Menus = $em->getRepository('TuniAnnonceBundle:Menu')->findAll();                    $Slides = $em->getRepository('TuniAnnonceBundle:Slider')->findAll();$Socials = $em->getRepository('TuniAnnonceBundle:Social')->findAll();             $Regions = $em->getRepository('TuniAnnonceBundle:Region')->findAll();            $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 1    ORDER BY a.id DESC    ");            $query->setMaxResults(3);            $lastAnnonces = $query                    ->getResult();            $query22 = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 2    ORDER BY a.id DESC    ");            $query22->setMaxResults(3);            $lastAnnonces22 = $query22                    ->getResult();            if ($type == "prop-besoin")                return $this->renderLogin2(array('Categories' => $Categories, 'Menus' => $Menus, 'Slides' => $Slides, 'Socials' => $Socials, 'Regions' => $Regions,                            'SousCategories' => $SousCategories,                            'Temoignages' => $Temoignages,                            'lastAnnonces' => $lastAnnonces,                            'lastAnnonces22' => $lastAnnonces22,                            'type' => $typeRef,                            'last_username' => $lastUsername,                            'error' => $error,'errorcompte' =>$errorcompte,                            'csrf_token' => $csrfToken,                            'entity' => $entity,                            'form' => $form->createView(),                            'formMembre' => $formMembre->createView(),                ));            return $this->renderLogin(array('Categories' => $Categories, 'Menus' => $Menus, 'Slides' => $Slides, 'Socials' => $Socials, 'Regions' => $Regions,                        'SousCategories' => $SousCategories,                        'Temoignages' => $Temoignages,                        'lastAnnonces' => $lastAnnonces,                        'lastAnnonces22' => $lastAnnonces22,                        'type' => $typeRef,                        'last_username' => $lastUsername,                        'error' => $error,'errorcompte' =>$errorcompte,                        'csrf_token' => $csrfToken,                        'entity' => $entity,                        'form' => $form->createView(),                        'formMembre' => $formMembre->createView(),            ));        }        //var_dump($typeRef);        return $this->renderLogin(array(                    'type' => $typeRef,                    'last_username' => $lastUsername,                    'error' => $error,'errorcompte' =>$errorcompte,                    'csrf_token' => $csrfToken,        ));    }    /**     * Renders the login template with the given parameters. Overwrite this function in     * an extended controller to provide additional data for the login template.     *     * @param array $data     *     * @return \Symfony\Component\HttpFoundation\Response     */    protected function renderLogin(array $data) {        $template = sprintf('TuniUserBundle:Security:login2.html.%s', $this->container->getParameter('fos_user.template.engine'));        return $this->container->get('templating')->renderResponse($template, $data);    }    /**     * Renders the login template with the given parameters. Overwrite this function in     * an extended controller to provide additional data for the login template.     *     * @param array $data     *     * @return \Symfony\Component\HttpFoundation\Response     */    protected function renderLogin2(array $data) {        $template = sprintf('TuniUserBundle:Security:login3.html.%s', $this->container->getParameter('fos_user.template.engine'));        return $this->container->get('templating')->renderResponse($template, $data);    }    public function checkAction() {        throw new \RuntimeException('You must configure the check path to be handled by the firewall using form_login in your security firewall configuration.');    }    public function logoutAction() {        throw new \RuntimeException('You must activate the logout in your security firewall configuration.');    }    public function checklogoutAction() {        $type = "Administrateur";        if ($_COOKIE["usertype"]) {            var_dump($_COOKIE);            $type = $_COOKIE["usertype"];            setcookie("usertype", "", time() - 3600);        }        return $this->loginAction($type);    }}