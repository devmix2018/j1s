<?phpnamespace Tuni\AnnonceBundle\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Tuni\AnnonceBundle\Entity\Contact;use Tuni\AnnonceBundle\Form\ContactType;use Tuni\AnnonceBundle\Entity\ServiceExpress;use Tuni\AnnonceBundle\Form\ServiceExpressType;use Symfony\Component\HttpFoundation\Response;use Tuni\AnnonceBundle\Entity\Annonce;use Tuni\AnnonceBundle\Form\AnnonceFrontType;use Tuni\AnnonceBundle\Form\AnnonceFrontDType;use Symfony\Component\HttpFoundation\RedirectResponse;class DefaultController extends Controller {    public function indexAction() {        return $this->render('TuniAnnonceBundle:Default:index.html.twig', $this->init());    }    public function init() {        $em = $this->getDoctrine()->getManager();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Temoignage');        $Temoignages = $repository->findBy(array('isPublier' => TRUE));        $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();        $Menus = $em->getRepository('TuniAnnonceBundle:Menu')->findAll();        $Slides = $em->getRepository('TuniAnnonceBundle:Slider')->findAll();$Socials = $em->getRepository('TuniAnnonceBundle:Social')->findAll();        $Regions = $em->getRepository('TuniAnnonceBundle:Region')->findAll();        $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findAll();        $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 1    ORDER BY a.id DESC    ");        $query->setMaxResults(3);        $lastAnnonces = $query                ->getResult();        $query22 = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 2    ORDER BY a.id DESC    ");        $query22->setMaxResults(3);        $lastAnnonces22 = $query22                ->getResult();            $membre = NULL;            if ($this->get('security.context')->isGranted('ROLE_USER')) {                //User is logged in                    $user = $this->container->get('security.context')->getToken()->getUser();                $id = $user->getId();                $membre = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $id));            }        return array('membre' => $membre, 'Categories' => $Categories, 'Menus' => $Menus, 'Slides' => $Slides, 'Socials' => $Socials, 'Regions' => $Regions,            'SousCategories' => $SousCategories,            'Temoignages' => $Temoignages,            'lastAnnonces' => $lastAnnonces,            'lastAnnonces22' => $lastAnnonces22        );    }    public function nousAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "Nous"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:nous.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }public function abonnementAction() {             $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "abonnement"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:abonnement.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }    public function avantageAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "NOS AVANTAGES"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:avantage.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }    public function securiteAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "SECURITE ET CONFIANCE"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:securite.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }     public function engagementAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "Nos engagements"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:engagement.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }     public function remunerationAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "Remuneration"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:remuneration.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }    public function besoinserviceAction() {        $entity = new Annonce();        $form = $this->createForm(new AnnonceFrontDType(), $entity);        $em = $this->getDoctrine()->getManager();        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 1    ORDER BY a.id DESC    ");        $query->setMaxResults(200);        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query, $this->get('request')->query->get('page', 1)/* page number */, 5/* limit per page */        );        return $this->render('TuniAnnonceBundle:Default:besoin-service.html.twig', array_merge($this->init(), array(                    'entity' => $entity,                    'Pays' => $Pays,                    'form' => $form->createView(),                    'pagination' => $pagination,        )));    }    public function proposServiceAction() {        $entity = new Annonce();        $form = $this->createForm(new AnnonceFrontType(), $entity);        $em = $this->getDoctrine()->getManager();        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 2    ORDER BY a.id DESC    ");        $query->setMaxResults(200);        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query, $this->get('request')->query->get('page', 1)/* page number */, 5/* limit per page */        );        return $this->render('TuniAnnonceBundle:Default:propos-service.html.twig', array_merge($this->init(), array(                    'entity' => $entity,                    'Pays' => $Pays,                    'form' => $form->createView(),                    'pagination' => $pagination,        )));    }    public function commentCaMarcheAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "COMMENT CA MARCHE"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:comment-ca-marche.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }    public function contactAction() {        $entity = new Contact();        $form = $this->createForm(new ContactType(), $entity);        return $this->render('TuniAnnonceBundle:Default:contact.html.twig', array_merge($this->init(), array(                    'entity' => $entity,                    'form' => $form->createView(),        )));    }    public function serviceExpressAction() {        $entity = new ServiceExpress();        $form = $this->createForm(new ServiceExpressType(), $entity);        return $this->render('TuniAnnonceBundle:Default:serviceExpress.html.twig', array_merge($this->init(), array(                    'entity' => $entity,                    'form' => $form->createView(),        )));    }    public function createExpressAction(Request $request) {        $entity = new ServiceExpress();        $this->get('session')->setFlash(                'notice', 'Erreur d\'envoi du message'        );        $form = $this->createForm(new ServiceExpressType(), $entity);        $form->bind($request);        if ($form->isValid()) {            $em = $this->getDoctrine()->getManager();            $em->persist($entity);            $em->flush();            $this->get('session')->setFlash(                    'notice', 'Message envoyé avec succé'            );        }        return $this->redirect($this->generateUrl('tuni_annonce_service-express'));    }public function faqAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "Faq"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:faq.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }    public function mentionAction() {        $em = $this->getDoctrine()->getManager();        $Articles = array();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Article');        $page = $em->getRepository('TuniAnnonceBundle:Page')->findOneBy(array("nomPage" => "Mention"));        if ($page)            $Articles = $repository->findBy(array('page' => $page->getId()));        return $this->render('TuniAnnonceBundle:Default:mention.html.twig', array_merge($this->init(), array(                    'Articles' => $Articles,        )));    }        public function errorAction() {            $error="";        if (isset($_SESSION['error_page'])) {            $error = $_SESSION['error_page'];            unset($_SESSION['error_page']);        }        return $this->render('TuniAnnonceBundle:Default:error.html.twig', array_merge($this->init(), array(                    'error_page' => $error,        )));    }    public function newsletterIndexAction() {        $this->addNews();        return $this->redirect($this->generateUrl("fos_user_security_login"));    }    public function addNews() {        $request = $this->get('request'); // On récupère l'objet request via le service container        $em = $this->getDoctrine()->getEntityManager();        if ('POST' == $request->getMethod()) {// Si on a posté le formulaire            $email = $request->request->get('email');            $repository = $this->getDoctrine()                    ->getManager()                    ->getRepository('TuniAnnonceBundle:Contact');            $Contact = $repository->findBy(array('email' => $email));            $this->get('session')->setFlash(                    'Newsletter', 'Vous éte déjas abonnée'            );            if (!$Contact) {                $contact = new Contact();                $contact->setEmail($email);                $em->persist($contact);                $em->flush();                $this->get('session')->setFlash(                        'Newsletter', 'L\'abonnée a été ajoutée avec succée'                );            }            //var_dump($email);        }    }    public function parrainageAction() {        return $this->render('TuniAnnonceBundle:Default:parrainage.html.twig', array_merge($this->init(), array( )));    }    /**     * Displays a form to create a new Contact entity.     *     * @Route("/parrainer", name="tuni_annonce_parrainer")     * @Method("POST")     */    public function parrainerAction()    {       $em = $this->getDoctrine()->getManager();            $entity = NULL;            $emailuser="";            if ($this->get('security.context')->isGranted('ROLE_USER')) {                //User is logged in                    $user = $this->container->get('security.context')->getToken()->getUser();                $id = $user->getId();                $entity = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $id));                $emailuser=$user->getEmail();                            }                        if (!$entity) {                            $this->get('session')->setFlash(                                                    'notice',                                                     'Erreur ,vous devez ètre connecté pour parrainer '                                                  );                return $this->render('TuniAnnonceBundle:Default:parrainage.html.twig', array_merge($this->init(), array( )));                   // throw $this->createNotFoundException('Unable to find Membre entity.');                }            $this->get('session')->setFlash(                                                    'notice',                                                     'Erreur d\'envoi du mail de parrainage'                                                  );            $request = $this->get('request');            $mail = $request->request->get('email');            $nom = $request->request->get('nom');            $prenom = $request->request->get('prenom');                                    if($mail!=NULL){            $entity1 = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('filleul' => $mail));            $entity2 = $em->getRepository('TuniAnnonceBundle:Utilisateur')->findOneBy(array('email' => $mail));                        if ($entity1||$entity2) {                            $this->get('session')->setFlash(                                                    'notice',                                                     'Erreur , l\'email '.$mail.'  déjas existe'                                                   );                return $this->render('TuniAnnonceBundle:Default:parrainage.html.twig', array_merge($this->init(), array( )));                  // throw $this->createNotFoundException('mail exist.');                }                $entity->setFilleul($mail);            $entity->setIsConfirmedParrain(false);             $em->persist($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'notice',                                                     'E-mail de parrainage envoyé avec succée'                                                  );                $msg=utf8_decode("Bonjour ".$nom." ".$prenom." ,<br>Le membre ".$entity->getNom()." ".$entity->getPrenom()." vous invite à rejoindre noter site de jobing et de profiter de nos différentes services ")."<br>Pour s'inscrir et valider l'invitation veuillez clicker ce lien: <br> <a href='http://".$_SERVER["HTTP_HOST"].$this->generateUrl('tuni_annonce_parrainer_confirm',array("email"=>$emailuser))."'>Clicker ici</a>";            $from = "contact@juste1service.leizart.com";            $message = \Swift_Message::newInstance()            ->setSubject("Invitation J1S")            ->setFrom($from)            ->setTo($mail)            ->setBody($msg,'text/html')            ;                $sent=$this->get('mailer')->send($message);              }                   		              //echo ($sent."<br>mail: ".$mail."<br> from: ".$from."<br>".utf8_decode("Bonjour ".$nom." ".$prenom." ,<br>Le membre ".$entity->getNom()." ".$entity->getPrenom()." vous invite à rejoindre noter site de jobing et de profiter de nos différentes services ")."<br>Pour s'inscrir et valider l'invitation veuillez clicker ce lien: <br> <a href='http://".$_SERVER["HTTP_HOST"].$this->generateUrl('tuni_annonce_parrainer_confirm',array("email"=>$emailuser))."'>Clicker ici</a>");          return $this->redirect($this->generateUrl('tuni_annonce_parrainer_get'));        }    /**     * Displays a form to create a new Contact entity.     *     * @Route("/parrainerConfirm/{email}", name="tuni_annonce_parrainer_confirm")          */    public function parrainerConfirmAction($email)    {       $em = $this->getDoctrine()->getManager();            $emailuser="";            $user = $em->getRepository('TuniAnnonceBundle:Utilisateur')->findOneBy(array('email' => $email));            if (!$user) {                    throw $this->createNotFoundException('Unable to find Membre entity.');                }             $id = $user->getId();             $entity =$entity = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $id));            $this->get('session')->setFlash(                                                    'notice',                                                     'Erreur lors de parrainage'                                                  );            if($email!=NULL){            $entity->setIsConfirmedParrain(true);             $em->persist($entity);            $em->flush();            $emailuser=$user->getEmail();            $from = "contact@juste1service.leizart.com";            $message = \Swift_Message::newInstance()            ->setSubject("Invitation J1S")            ->setFrom($from)            ->setTo($emailuser)            ->setBody($entity->getFilleul()." à accepté votre invitation , en attente de son inscription",'text/html')            ;                $this->get('mailer')->send($message);                              $_SESSION['compte'] = 'Bienvenue '.$email.' veuilez remplir le formulaire pour créer votre compte';                  $this->get('session')->setFlash(                                                    'compte',                                                    $_SESSION['compte']                                                  );                                return new RedirectResponse( $this->generateUrl('fos_user_security_login'));            }                   		                                 return $this->redirect($this->generateUrl('fos_user_security_login'));             }}