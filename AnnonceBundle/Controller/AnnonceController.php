<?phpnamespace Tuni\AnnonceBundle\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Tuni\AnnonceBundle\Entity\Annonce;use Tuni\AnnonceBundle\Form\AnnonceFrontType;use Tuni\AnnonceBundle\Form\AnnonceAdminType;use \DateTime;use Symfony\Component\HttpFoundation\Response;/** * Annonce controller. * * @Route("/annonce") */class AnnonceController extends Controller {    /**     * Lists all Annonce entities.     *     * @Route("/", name="annonce")     * @Method("GET")     * @Template()     */    public function indexAction() {        $em = $this->getDoctrine()->getManager();        $StatutAnnonces = $em->getRepository('TuniAnnonceBundle:StatutAnnonce')->findAll();        $query2 = $em->createQueryBuilder();        $query2->select('a')                ->from('TuniAnnonceBundle:Annonce', 'a')                ->getQuery();        $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Annonce a    JOIN a.typeAnnonce k    JOIN a.sousCat s    JOIN s.categorie c");        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query3, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */        );        $total = $query2->select('COUNT(a)')                ->getQuery()                ->getSingleScalarResult();        // parameters to template        return $this->render('TuniAnnonceBundle:Annonce:index.html.twig', array('page' => 'announces', 'pagination' => $pagination, 'StatutAnnonces' => $StatutAnnonces, 'total' => $total));    }    /**     * Creates a new Annonce entity.     *     * @Route("/", name="annonce_create")     * @Method("POST")     * @Template("TuniAnnonceBundle:Annonce:new.html.twig")     */    public function createAction(Request $request) {        $entity = new Annonce();        $form = $this->createForm(new AnnonceAdminType(), $entity);        $form->bind($request);        $imgs = array();        try {            if ($form->isValid()) {                $em = $this->getDoctrine()->getManager();                foreach ($_POST as $name => $value) {                    if (strpos($name, '_tmpname'))                        $imgs[] = $value;                }                $postDate = $request->request->get('dateAnnonce');                $d = NULL;                if (isset($postDate) && $postDate != NULL) {                    $d = new DateTime($postDate);                    $z = $d->format('Y-m-d H:i:s');                }                $entity->setDateAnnonce($d);                if (isset($imgs))                    $entity->setImagesAnn(implode(';', $imgs));                else                    $entity->setImagesAnn(NULL);                $em->persist($entity);                $em->flush();                if (isset($imgs) && $entity->getImagesAnn() != NULL && $entity->getImagesAnn() != "")                    $entity->moveImages();                $this->get('session')->setFlash(                        'notice', 'L\'annonce a été crée avec succée'                );                return $this->redirect($this->generateUrl('annonce'));            }            return array('page' => 'announces',                'entity' => $entity,                'form' => $form->createView(),            );        } catch (Exception $e) {            $this->get('session')->setFlash(                    'notice', ' ERREUR ,Veuillez saisir de nouveau les informations de l\'annonce ! '            );            return array('page' => 'announces',                'entity' => $entity,                'form' => $form->createView(),            );        }    }    /**     * Creates a new Annonce entity.     *     * @Route("/create", name="annonceFront_createMembre")     * @Method("POST")     * @Template("TuniAnnonceBundle:Annonce:newMembre.html.twig")     */    public function createMembreAction(Request $request) {        $user = $this->container->get('security.context')->getToken()->getUser();        $entity = new Annonce();        $form = $this->createForm(new AnnonceFrontType(), $entity);        $form->bind($request);        $imgs = array();        if ($form->isValid()) {            $em = $this->getDoctrine()->getManager();            foreach ($_POST as $name => $value) {                if (strpos($name, '_tmpname'))                    $imgs[] = $value;            }            $postDate = $request->request->get('dateAnnonce');            $d = new DateTime($postDate);            $z = $d->format('Y-m-d H:i:s');            $entity->setDateAnnonce($d);            if (isset($imgs))                $entity->setImagesAnn(implode(';', $imgs));            else                $entity->setImagesAnn("");            $entity->setMembre($em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $user->getId())));            if (in_array('ROLE_PARTICULIER', $user->getRoles()))                $entity->setTypeAnnonce($em->getRepository('TuniAnnonceBundle:TypeAnnonce')->findOneBy(array('id' => 1)));            elseif (in_array('ROLE_PROFESSIONNEL', $user->getRoles()))                $entity->setTypeAnnonce($em->getRepository('TuniAnnonceBundle:TypeAnnonce')->findOneBy(array('id' => 2)));            $em->persist($entity);            $em->flush();            //if (isset($imgs))            //$entity->moveImages();            $this->get('session')->setFlash(                    'notice', 'L\'annonce a été crée avec succée'            );            $user = $this->container->get('security.context')->getToken()->getUser();            return $this->redirect($this->generateUrl('tuni_membre_edit', array('id' => $user->getId())));        }        return array_merge($this->init(), array(            'page' => 'announces',            'entity' => $entity,            'form' => $form->createView(),        ));    }    public function clearImages($images) {        foreach ($images as $image) {            unlink(__DIR__ . '/../../../../web/bundles/tuniadmin/theme/scripts/plupload/examples/photos' . $image);        }    }    /**     * Displays a form to create a new Annonce entity.     *     * @Route("/new", name="annonce_new")     * @Method("GET")     * @Template()     */    public function newAction() {        $entity = new Annonce();        $form = $this->createForm(new AnnonceAdminType(), $entity);        $em = $this->getDoctrine()->getManager();        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();        return array('page' => 'announces',            'entity' => $entity,            'Pays' => $Pays,            'Categories' => $Categories,            'form' => $form->createView(),        );    }    /**     * Displays a form to create a new Annonce entity.     *     * @Route("/new", name="annonceFront_newMembre")     * @Method("GET")     * @Template()     */    public function newMembreAction() {        $entity = new Annonce();        $form = $this->createForm(new AnnonceFrontType(), $entity);        $em = $this->getDoctrine()->getManager();        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        // $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();             return array_merge($this->init(), array(            'page' => 'announces',            'entity' => $entity,            'Pays' => $Pays,            'form' => $form->createView(),        ));    }    /**     * Combobox.     *     * @Route("/remplir_cb_Region", name="remplir_cb_Region")     * @Method("post")     */    public function remplirRegionAction() {        $request = $this->getRequest();        $em = $this->getDoctrine()->getEntityManager();        if ($request->isXmlHttpRequest()) { // pour vérifier la présence d'une requete Ajax            $id = '';            $id = $request->get('id');            if ($id != '') {                $Regions = $em->getRepository('TuniAnnonceBundle:Region')->findBy(array('pays' => $id));                $tabRegions = array();                $i = 0;                foreach ($Regions as $Region) { // pour transformer la réponse à ta requete en tableau qui replira le select2                    $tabRegions[$i]['id'] = $Region->getId();                    $tabRegions[$i]['nomReg'] = $Region->getNomReg();                    $i++;                }                $response = new Response();                $data = json_encode($tabRegions); // c'est pour formater la réponse de la requete en format que jquery va comprendre                $response->headers->set('Content-Type', 'application/json');                $response->setContent($data);                return $response;            }        }        return new Response('Erreur');    }    /**     * Combobox.     *     * @Route("/remplir_cb_Ville", name="remplir_cb_Ville")     * @Method("post")     */    public function remplirVilleAction() {        $request = $this->getRequest();        $em = $this->getDoctrine()->getEntityManager();        if ($request->isXmlHttpRequest()) { // pour vérifier la présence d'une requete Ajax            $id = '';            $id = $request->get('id');            if ($id != '') {                $Villes = $em->getRepository('TuniAnnonceBundle:Ville')->findBy(array('region' => $id));                $tabVilles = array();                $i = 0;                foreach ($Villes as $Ville) { // pour transformer la réponse à ta requete en tableau qui replira le select2                    $tabVilles[$i]['id'] = $Ville->getId();                    $tabVilles[$i]['nomV'] = $Ville->getNomV();                    $i++;                }                $response = new Response();                $data = json_encode($tabVilles); // c'est pour formater la réponse de la requete en format que jquery va comprendre                $response->headers->set('Content-Type', 'application/json');                $response->setContent($data);                return $response;            }        }        return new Response('Erreur');    }    /**     * Combobox.     *     * @Route("/remplir_cb_Categorie", name="remplir_cb_Categorie")     * @Method("post")     */    public function remplirCategorieAction() {        $request = $this->getRequest();        $em = $this->getDoctrine()->getEntityManager();        if ($request->isXmlHttpRequest()) { // pour vérifier la présence d'une requete Ajax            $id = '';            $id = $request->get('id');            if ($id != '') {                $Categories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findBy(array('categorie' => $id));                $tabCategories = array();                $i = 0;                foreach ($Categories as $Categorie) { // pour transformer la réponse à ta requete en tableau qui replira le select2                    $tabCategories[$i]['id'] = $Categorie->getId();                    $tabCategories[$i]['nomSousCat'] = $Categorie->getNomSousCat();                    $i++;                }                $response = new Response();                $data = json_encode($tabCategories); // c'est pour formater la réponse de la requete en format que jquery va comprendre                $response->headers->set('Content-Type', 'application/json');                $response->setContent($data);                return $response;            }        }        return new Response('Erreur');    }    /**     * Combobox.     *     * @Route("/remplir_Attributs", name="remplir_Attributs")     * @Method("post")     */    public function remplirAttributsAction() {        $request = $this->getRequest();        $em = $this->getDoctrine()->getEntityManager();        if ($request->isXmlHttpRequest()) { // pour vérifier la présence d'une requete Ajax            $id = '';            $id = $request->get('id');            if ($id != '') {                $SCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findOneBy(array('id' => $id));                $tabAttrs = array();                $attribusclist = $SCategories->getAttribut();                $i = 0;                foreach ($attribusclist as $AttributSC) { // pour transformer la réponse à ta requete en tableau qui replira le select2                    $tabAttrs[$i]['id'] = $AttributSC->getId();                    $tabAttrs[$i]['libelle'] = $AttributSC->getLibelle();                    $tabAttrs[$i]['unite'] = $AttributSC->getUnite();                    $tabAttrs[$i]['isSelectbox'] = $AttributSC->getisSelectbox();                    $i++;                }                $response = new Response();                $data = json_encode($tabAttrs); // c'est pour formater la réponse de la requete en format que jquery va comprendre                $response->headers->set('Content-Type', 'application/json');                $response->setContent($data);                return $response;            }        }        return new Response('Erreur');    }    /**     * Combobox.     *     * @Route("/remplir_AttributsVals", name="remplir_AttributsVals")     * @Method("post")     */    public function remplirAttributsValsAction() {        $request = $this->getRequest();        $em = $this->getDoctrine()->getEntityManager();        if ($request->isXmlHttpRequest()) { // pour vérifier la présence d'une requete Ajax            $id = '';            $id = $request->get('id');            if ($id != '') {                $Multichoix = $em->getRepository('TuniAnnonceBundle:Multichoix')->findBy(array('attribut' => $id));                $tabchoix = array();                $i = 0;                foreach ($Multichoix as $choix) { // pour transformer la réponse à ta requete en tableau qui replira le select2                    $tabchoix[$i]['id'] = $choix->getId();                    $tabchoix[$i]['val'] = $choix->getVal();                    $i++;                }                $response = new Response();                $data = json_encode($tabchoix); // c'est pour formater la réponse de la requete en format que jquery va comprendre                $response->headers->set('Content-Type', 'application/json');                $response->setContent($data);                return $response;            }        }        return new Response('Erreur');    }    /**     * Combobox.     *     * @Route("/setStatutAnnonce", name="setStatutAnnonce")     * @Method("post")     */    public function setStatutAnnonceAction() {        $request = $this->getRequest();        $em = $this->getDoctrine()->getEntityManager();        if ($request->isXmlHttpRequest()) { // pour vérifier la présence d'une requete Ajax            $id = $request->get('id');            $idStat = '';            $idStat = $id[0];            $idAnn = '';            $idAnn = $id[1];            if ($idAnn != '' && $idStat != '') {                $StatutAnnonce = $em->getRepository('TuniAnnonceBundle:StatutAnnonce')->find(intval($idStat));                $Annonce = $em->getRepository('TuniAnnonceBundle:Annonce')->find(intval($idAnn));                $Annonce->setStatutAnnonce($StatutAnnonce);                $em->persist($Annonce);                $em->flush();                $response = new Response();                $data = json_encode(array('ok' => 'Statut modifié avec succé')); // c'est pour formater la réponse de la requete en format que jquery va comprendre                $response->headers->set('Content-Type', 'application/json');                $response->setContent($data);                return $response;            }        }        return new Response('Erreur  ' . serialize($id));    }    /**     * Finds and displays a Annonce entity.     *     * @Route("/{id}", name="annonce_show")     * @Method("GET")     * @Template()     */    public function showAction($id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        $deleteForm = $this->createDeleteForm($id);        return array('page' => 'announces',            'entity' => $entity,            'delete_form' => $deleteForm->createView(),        );    }    /**     * Finds and displays a Annonce entity.     *     * @Route("/{id}", name="annonceFront_show")     * @Method("GET")     * @Template()     */    public function showMembreAction($id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        if ($entity->getMembre() == NULL) {            throw $this->createNotFoundException('Unable to find the member who wrote this Annonce entity.');        }        $deleteForm = $this->createDeleteForm($id);        $query2 = $em->createQueryBuilder();        $query2->select('a')                ->from('TuniAnnonceBundle:Annonce', 'a')                ->getQuery();        $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Annonce a    JOIN a.typeAnnonce k    JOIN a.sousCat s    WHERE a.membre=    " . $entity->getMembre()->getId());        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query3, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */        );        return array_merge($this->init(), array(            'page' => 'announces',            'entity' => $entity,            'delete_form' => $deleteForm->createView(),            'pagination' => $pagination,        ));    }    /**     * Displays a form to edit an existing Annonce entity.     *     * @Route("/{id}/edit", name="annonce_edit")     * @Method("GET")     * @Template()     */    public function editAction($id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        $editForm = $this->createForm(new AnnonceAdminType(), $entity);        $deleteForm = $this->createDeleteForm($id);        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();        return array_merge($this->init(), array(            'page' => 'announces',            'entity' => $entity,            'Pays' => $Pays,            'Categories' => $Categories,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),        ));    }    /**     * Displays a form to edit an existing Annonce entity.     *     * @Route("/{id}/editMembre", name="annonceFront_editMembre")     * @Method("GET")     * @Template()     */    public function editMembreAction($id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        $editForm = $this->createForm(new AnnonceFrontType(), $entity);        $deleteForm = $this->createDeleteForm($id);        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        // $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();             return array_merge($this->init(), array(            'page' => 'announces',            'entity' => $entity,            'Pays' => $Pays,            //   'Categories' => $Categories,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),        ));    }    /**     * Edits an existing Annonce entity.     *     * @Route("/{id}", name="annonce_update")     * @Method("POST")     * @Template("TuniAnnonceBundle:Annonce:edit.html.twig")     */    public function updateAction(Request $request, $id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        $deleteForm = $this->createDeleteForm($id);        $editForm = $this->createForm(new AnnonceAdminType(), $entity);        $editForm->bind($request);        if ($editForm->isValid()) {            foreach ($_POST as $name => $value) {                if (strpos($name, '_tmpname'))                    $imgs[] = $value;            }            $postDate = $request->request->get('dateAnnonce');            $d = NULL;            if (isset($postDate) && $postDate != NULL) {                $d = new DateTime($postDate);                $z = $d->format('Y-m-d H:i:s');            }            $entity->setDateAnnonce($d);            if (isset($imgs)) {                if ($entity->getImagesAnn() != NULL && $entity->getImagesAnn() != "")                    $entity->removeImage();                $entity->setImagesAnn(implode(';', $imgs));                $entity->moveImages();            }            $em->persist($entity);            $em->flush();            $this->get('session')->setFlash(                    'notice', 'L\'annonce a été modifié avec succée'            );            return $this->redirect($this->generateUrl('annonce'));        }        $this->get('session')->setFlash(                'notice', ' ERREUR ,Veuillez saisir de nouveau les informations de l\'annonce ! '        );        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        // $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();             return array_merge($this->init(), array(            'page' => 'announces',            'entity' => $entity,            'Pays' => $Pays,            //   'Categories' => $Categories,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),        ));    }    /**     * Edits an existing Annonce entity.     *     * @Route("/{id}", name="annonceFront_update")     * @Method("POST")     * @Template("TuniAnnonceBundle:Annonce:editMembre.html.twig")     */    public function updateMembreAction(Request $request, $id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        $deleteForm = $this->createDeleteForm($id);        $editForm = $this->createForm(new AnnonceFrontType(), $entity);        $editForm->bind($request);        try {            if ($editForm->isValid()) {                foreach ($_POST as $name => $value) {                    if (strpos($name, '_tmpname'))                        $imgs[] = $value;                }                $postDate = $request->request->get('dateAnnonce');                $d = new DateTime($postDate);                $z = $d->format('Y-m-d H:i:s');                $entity->setDateAnnonce($d);                if (isset($imgs)) {                    if ($entity->getImagesAnn() != "")                        $entity->removeImage();                    $entity->setImagesAnn(implode(';', $imgs));                    $entity->moveImages();                }                $em->persist($entity);                $em->flush();                $this->get('session')->setFlash(                        'notice', 'L\'annonce a été modifié avec succée'                );                $user = $this->container->get('security.context')->getToken()->getUser();                return $this->redirect($this->generateUrl('tuni_membre_edit', array('id' => $user->getId())));            }            $this->get('session')->setFlash(                    'notice', ' ERREUR ,Veuillez saisir de nouveau les informations de l\'annonce ! '            );            $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();            $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();            return array('page' => 'announces',                'entity' => $entity,                'Pays' => $Pays,                'Categories' => $Categories,                'edit_form' => $editForm->createView(),                'delete_form' => $deleteForm->createView(),            );        } catch (Exception $e) {            $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();            $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();            $this->get('session')->setFlash(                    'notice', 'ERREUR ,Veuillez saisir de nouveau les informations de l\'annonce ! '            );            return array('page' => 'announces',                'entity' => $entity,                'Pays' => $Pays,                'Categories' => $Categories,                'edit_form' => $editForm->createView(),                'delete_form' => $deleteForm->createView(),            );        }    }    /**     * Deletes a Annonce entity.     *     * @Route("/{id}", name="annonceFront_deleteMembre")     * @Method("GET")     */    public function deleteMembreAction(Request $request, $id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        $this->get('session')->setFlash(                'notice', ' ERREUR de supprission de l\'annonce ! '        );        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        if ($entity->getImagesAnn() != "")            $entity->removeImage();        $em->remove($entity);        $em->flush();        $this->get('session')->setFlash(                'notice', 'L\'annonce a été supprimé avec succée'        );        $user = $this->container->get('security.context')->getToken()->getUser();        return $this->redirect($this->generateUrl('tuni_membre_edit', array('id' => $user->getId())));    }    /**     * Deletes a Annonce entity.     *     * @Route("/{id}", name="annonce_delete")     * @Method("GET")     */    public function deleteAction(Request $request, $id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Annonce')->find($id);        $this->get('session')->setFlash(                'notice', ' ERREUR de supprission de l\'annonce ! '        );        if (!$entity) {            throw $this->createNotFoundException('Unable to find Annonce entity.');        }        $entity->removeImage();        $em->remove($entity);        $em->flush();        $this->get('session')->setFlash(                'notice', 'L\'annonce a été supprimé avec succée'        );        return $this->redirect($this->generateUrl('annonce'));    }    /**     * Creates a form to delete a Annonce entity by id.     *     * @param mixed $id The entity id     *     * @return Symfony\Component\Form\Form The form     */    private function createDeleteForm($id) {        return $this->createFormBuilder(array('id' => $id))                        ->add('id', 'hidden')                        ->getForm()        ;    }    public function init() {        $em = $this->getDoctrine()->getManager();        $repository = $this->getDoctrine()                ->getManager()                ->getRepository('TuniAnnonceBundle:Temoignage');        $Temoignages = $repository->findBy(array('isPublier' => TRUE));        $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();        $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findAll();        $Menus = $em->getRepository('TuniAnnonceBundle:Menu')->findAll();                $Slides = $em->getRepository('TuniAnnonceBundle:Slider')->findAll();$Socials = $em->getRepository('TuniAnnonceBundle:Social')->findAll();         $Regions = $em->getRepository('TuniAnnonceBundle:Region')->findAll(); $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 1    ORDER BY a.id DESC    ");        $query->setMaxResults(3);        $lastAnnonces = $query                ->getResult();        $query22 = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    WHERE a.typeAnnonce = 2    ORDER BY a.id DESC    ");        $query22->setMaxResults(3);        $lastAnnonces22 = $query22                ->getResult();        $membre = NULL;        if ($this->get('security.context')->isGranted('ROLE_USER')) {            //User is logged in                $user = $this->container->get('security.context')->getToken()->getUser();            $id = $user->getId();            $membre = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $id));        }        return array('membre' => $membre, 'Categories' => $Categories, 'Menus' => $Menus, 'Slides' => $Slides, 'Socials' => $Socials, 'Regions' => $Regions,            'SousCategories' => $SousCategories,            'Temoignages' => $Temoignages,            'lastAnnonces' => $lastAnnonces,            'lastAnnonces22' => $lastAnnonces22        );    }    /**     * Lists all Annonce entities.     *     * @Route("/Recherche", name="annonceFront_Recherche")     * @Method("POST")     * @Template("TuniAnnonceBundle:Annonce:Recherche.html.twig")     */    public function RechercheAction(Request $request) {        $em = $this->getDoctrine()->getManager();        // $StatutAnnonces = $em->getRepository('TuniAnnonceBundle:StatutAnnonce')->findAll();             $mc = $request->request->get('mc');        if (!isset($mc))            return $this->render('TuniAnnonceBundle:Annonce:Recherche.html.twig', array_merge($this->init(), array(                        'page' => 'announces', 'pagination' => NULL, 'total' => 0)))            ;        $query2 = $em->createQueryBuilder();        //$and=$query2->expr()->andx();        $query2->select('a')                ->from('TuniAnnonceBundle:Annonce', 'a')                ->where($query2->expr()->like('a.titreAnn', $query2->expr()->literal('%' . $mc . '%')))                ->orwhere($query2->expr()->like('a.descAnn', $query2->expr()->literal('%' . $mc . '%')))                ->orwhere($query2->expr()->like('a.motCles', $query2->expr()->literal('%' . $mc . '%')))                //->where('a.titreAnn LIKE %'.$mc.'%')                ->andWhere("a.publier= 1")                ->getQuery();        $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Annonce a    JOIN a.typeAnnonce k    JOIN a.sousCat s    WHERE a.publier= 1 AND (a.titreAnn LIKE " . $query2->expr()->literal('%' . $mc . '%') . " OR a.descAnn LIKE " . $query2->expr()->literal('%' . $mc . '%') . " OR a.motCles LIKE " . $query2->expr()->literal('%' . $mc . '%') . ")") ;        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query3, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */        );        $total = $query2->select('COUNT(a)')                ->getQuery()                ->getSingleScalarResult();        // parameters to template        //return $this->render('TuniAnnonceBundle:Annonce:Recherche.html.twig', array_merge($this->init(), array(        //            'page' => 'announces', 'pagination' => $pagination, 'total' => $total)));        return $this->render('TuniAnnonceBundle:Annonce:RechercheAvance.html.twig', array_merge($this->init(), array(                    'page' => 'announces', 'pagination' => $pagination, 'total' => $total, "result" => true)))        ;    }    /**     * Lists all Annonce entities.     *     * @Route("/RechercheAvance", name="annonceFront_RechercheAvance")     * @Method("POST")     * @Template("TuniAnnonceBundle:Annonce:RechercheAvance.html.twig")     */    public function RechercheAvanceAction(Request $request) {        $em = $this->getDoctrine()->getManager();        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        $Rubriques = $em->getRepository('TuniAnnonceBundle:TypeAnnonce')->findAll();        $Region = $request->request->get('Region');        $ville = $request->request->get('Ville');        $pays = $request->request->get('Pays');        $typeAnnonce = $request->request->get('Type');        $souscat = $request->request->get('soucat');        $cat = $request->request->get('Categories');        $min = $request->request->get('rech_prix_min');        $max = $request->request->get('rech_prix_max');        $start = $request->request->get('start');        $end = $request->request->get('end');        $mc = $request->request->get('motClet');        if (!isset($mc))            $mc = "";if (!isset($souscat))            $souscat = "";//        if (!isset($typeAnnonce) || !isset($min) || !isset($max) || $souscat == "Sélectionner une sous catégories" || !isset($souscat))//            return $this->render('TuniAnnonceBundle:Annonce:RechercheAvance.html.twig', array_merge($this->init(), array(//                        'page' => 'announces', 'pagination' => NULL, 'total' => 0, 'Pays' => $Pays, 'Rubriques' => $Rubriques, "result" => false)))//            ;        $query2 = $em->createQueryBuilder();        //$and=$query2->expr()->andx();        $query2->select('a')                ->from('TuniAnnonceBundle:Annonce', 'a')                ->where($query2->expr()->like('a.titreAnn', $query2->expr()->literal('%' . $mc . '%')))                ->orwhere($query2->expr()->like('a.descAnn', $query2->expr()->literal('%' . $mc . '%')))                ->orwhere($query2->expr()->like('a.motCles', $query2->expr()->literal('%' . $mc . '%')))                //->where('a.titreAnn LIKE %'.$mc.'%')                ->where("a.publier = 1")                ->getQuery();        $req = "";        if (isset($typeAnnonce)) {            $typeA = $em->getRepository('TuniAnnonceBundle:TypeAnnonce')->findOneBy(array('type' => $typeAnnonce));            if ($typeA) {                $query2->andWhere("a.typeAnnonce=" . $typeA->getId());                $req.="AND a.typeAnnonce=" . $typeA->getId();            }        }        if (isset($min) && $min != "") {            $query2->andWhere("a.prixAnn >=" . $min);            $req.="AND a.prixAnn >=" . $min . " ";        }        if (isset($max) && $max != "") {            $query2->andWhere("a.prixAnn <=" . $max);            $req.="AND a.prixAnn <=" . $max . " ";        }        if (isset($start) && $start != "") {            $d = new DateTime($start);            $z = $d->format('Y-m-d');            $query2->andWhere("a.dateAnnonce >='" . $z . "'");            $req.="AND a.dateAnnonce >='" . $z . "' ";        }        if (isset($end) && $end != "") {            $d = new DateTime($end);            $z = $d->format('Y-m-d');            $query2->andWhere("a.dateAnnonce <='" . $z . "'");            $req.="AND a.dateAnnonce <='" . $z . "' ";        }        if (isset($cat) && $cat != "") {            if (!isset($souscat) || $souscat == "") {                $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findBy(array('categorie' => $cat));                $list = array();                foreach ($SousCategories as $SousCateg) {                    $list[] = $SousCateg->getId();                }                $query2->andWhere("a.sousCat IN (" . implode($list, ',') . ")");                $req.="AND a.sousCat IN (" . implode($list, ',') . ") ";            } else {                $query2->andWhere("a.sousCat=" . $souscat);                $req.="AND a.sousCat = " . $souscat . " ";            }        }        if (isset($Region) && $Region != "") {            if (!isset($ville) || $ville == "") {                $villes = $em->getRepository('TuniAnnonceBundle:Ville')->findBy(array('region' => $Region));                $list = array();                foreach ($villes as $vil) {                    $list[] = $vil->getId();                }                $query2->andWhere("a.ville IN (" . implode($list, ',') . ")");                $req.="AND a.ville IN (" . implode($list, ',') . ") ";            } else {                $query2->andWhere("a.ville=" . $ville);                $req.="AND a.ville = " . $ville . " ";            }        }        $total = $query2->select('COUNT(a)')                ->getQuery()                ->getSingleScalarResult();        // var_dump($souscat);        $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Annonce a    JOIN a.typeAnnonce k    JOIN a.sousCat s    WHERE  a.publier= 1 AND (a.titreAnn LIKE " . $query2->expr()->literal('%' . $mc . '%') . " OR a.descAnn LIKE " . $query2->expr()->literal('%' . $mc . '%') . " OR a.motCles LIKE " . $query2->expr()->literal('%' . $mc . '%') . ")" . $req)        ;        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query3, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */        );        // parameters to template        return $this->render('TuniAnnonceBundle:Annonce:RechercheAvance.html.twig', array_merge($this->init(), array(                    'page' => 'announces', 'pagination' => $pagination, 'total' => $total, 'Pays' => $Pays, 'Rubriques' => $Rubriques, "result" => true)))        ;    }    /**     * Lists all Annonce entities.     *     * @Route("/RechercheAvanceGet", name="annonceFront_RechercheAvanceGet")     * @Method("GET")     * @Template("TuniAnnonceBundle:Annonce:RechercheAvance.html.twig")     */    public function RechercheAvanceGetAction(Request $request) {        $em = $this->getDoctrine()->getManager();        $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();        $Rubriques = $em->getRepository('TuniAnnonceBundle:TypeAnnonce')->findAll();        return $this->render('TuniAnnonceBundle:Annonce:RechercheAvance.html.twig', array_merge($this->init(), array(                    'page' => 'announces', 'pagination' => NULL, 'total' => 0, 'Pays' => $Pays, 'Rubriques' => $Rubriques, "result" => false)))        ;    }    /**     * Deletes a Annonce entity.     *     * @Route("/ReAv/{idc}/{idsc}/", name="annonceFront_ReAv")     * @Method("GET")     */    public function ReAvAction(Request $request, $idc, $idcs, $idReg) { {            $em = $this->getDoctrine()->getManager();            $Pays = $em->getRepository('TuniAnnonceBundle:Pays')->findAll();            $Rubriques = $em->getRepository('TuniAnnonceBundle:TypeAnnonce')->findAll();            $Ville = "";            $region = "";            $pays = "";            $typeAnnonce = "1";            if ($idcs == 0)                $souscat = "";            else                $souscat = "" . $idcs;            if ($idc == 0)                $cat = "";            else                $cat = "" . $idc;            if ($idReg == 0)                $region = "";            else                $region = "" . $idReg;            $min = "";            $max = "";            $query2 = $em->createQueryBuilder();            //$and=$query2->expr()->andx();            $query2->select('a')                    ->from('TuniAnnonceBundle:Annonce', 'a')                    //->where($query2->expr()->like('a.titreAnn', $query2->expr()->literal('%'.$mc.'%')))                    //->orwhere($query2->expr()->like('a.descAnn', $query2->expr()->literal('%'.$mc.'%')))                    // ->orwhere($query2->expr()->like('a.motCles', $query2->expr()->literal('%'.$mc.'%')))                    //->where('a.titreAnn LIKE %'.$mc.'%')                    ->where("a.publier = 1")                    ->andWhere("a.typeAnnonce=" . $typeAnnonce)                    ->getQuery();            $req = "";            if (isset($min) && $min != "") {                $query2->andWhere("a.prixAnn >=" . $min);                $req.="AND a.prixAnn >=" . $min . " ";            }            if (isset($max) && $max != "") {                $query2->andWhere("a.prixAnn <=" . $max);                $req.="AND a.prixAnn <=" . $max . " ";            }            if (isset($cat) && $cat != "") {                if (!isset($souscat) || $souscat == "") {                    $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findBy(array('categorie' => $cat));                    $list = array();                    foreach ($SousCategories as $SousCateg) {                        $list[] = $SousCateg->getId();                    }                    $query2->andWhere("a.sousCat IN (" . implode($list, ',') . ")");                    $req.="AND a.sousCat IN (" . implode($list, ',') . ") ";                } else {                    $query2->andWhere("a.sousCat=" . $souscat);                    $req.="AND a.sousCat = " . $souscat . " ";                }            }            if (isset($pays) && $pays != "") {                if (!isset($region) || $region == "") {                    $regions = $em->getRepository('TuniAnnonceBundle:Region')->findBy(array('pays' => $pays));                    $list = array();                    foreach ($regions as $reg) {                        $Villes = $em->getRepository('TuniAnnonceBundle:Ville')->findBy(array('region' => $reg->getId()));                        foreach ($Villes as $Vill) {                            $list[] = $Vill->getId();                        }                    }                    $query2->andWhere("a.ville IN (" . implode($list, ',') . ")");                    $req.="AND a.ville IN (" . implode($list, ',') . ") ";                } else {                    if (!isset($Ville) || $Ville == "") {                        $Villes = $em->getRepository('TuniAnnonceBundle:Ville')->findBy(array('region' => $region));                        $list = array();                        foreach ($Villes as $Vill) {                            $list[] = $Vill->getId();                        }                        $query2->andWhere("a.ville IN (" . implode($list, ',') . ")");                        $req.="AND a.ville IN (" . implode($list, ',') . ") ";                    } else {                        $query2->andWhere("a.ville=" . $Ville);                        $req.="AND a.ville = " . $Ville . " ";                    }                }            }            $total = $query2->select('COUNT(a)')                    ->getQuery()                    ->getSingleScalarResult();            //var_dump($total);            //die();            $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Annonce a    JOIN a.typeAnnonce k    JOIN a.sousCat s    WHERE a.typeAnnonce=" . $typeAnnonce . "AND a.publier= 1  " . $req)            ;            $paginator = $this->get('knp_paginator');            $pagination = $paginator->paginate(                    $query3, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */            );            // parameters to template            return $this->render('TuniAnnonceBundle:Annonce:RechercheAvance.html.twig', array_merge($this->init(), array(                        'page' => 'announces', 'pagination' => $pagination, 'total' => $total, 'Pays' => $Pays, 'Rubriques' => $Rubriques, "result" => true)))            ;        }    }    /**     * .     *     * @Route("/deleteliste", name="annonce_deleteliste")     * @Method("post")     *     * @Template()     */    public function deletelisteAction() {        $request = $this->get('request');        if ($request->isXMLHttpRequest()) {            //if ('POST' == $request->getMethod())            $response = new Response();            $em = $this->getDoctrine()->getEntityManager();            $exist = FALSE;            $repository = $this->getDoctrine()                    ->getEntityManager()                    ->getRepository('TuniAnnonceBundle:Annonce');            $Annonces = $repository->findAll();            foreach ($Annonces as $Annonce) {                if (array_key_exists('admin_' . $Annonce->getId(), $_POST)) {                    if ($_POST['admin_' . $Annonce->getId()]) {                        $Annonce->removeImage();                        $em->remove($Annonce);                        $em->flush();                        $exist = TRUE;                    }                }            }            $this->get('session')->setFlash(                    'notice', 'Pas d\'annonce à supprimer!'            );            if ($exist)                $this->get('session')->setFlash(                        'notice', 'Les annonces ont été supprimés avec succée'                );            return $response;        }    }}