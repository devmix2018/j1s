<?phpnamespace Tuni\AdminBundle\Controller;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use \Symfony\Component\HttpFoundation\Request;use \Symfony\Component\HttpFoundation\Session;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use DiagImm\TuniAdminBundle\Entity\Utilisateur;use Symfony\Component\HttpFoundation\Response;use MakerLabs\Bundle\PagerBundle\Pager;use MakerLabs\Bundle\PagerBundle\Adapter\DoctrineOrmAdapter;use \DateTime;class DefaultController extends Controller {    public function indexAction() {        $request = $this->get('request');        $session = $this->get('session');        $em = $this->getDoctrine()->getManager();        //$session = $this->container->get('session');        $atr = $request->attributes;        $loc = $atr->get("_locale");        $query2 = $em->createQueryBuilder();        $stats = array();        $stats['CAnn'] = $query2->select('COUNT(a)')                ->from('TuniAnnonceBundle:Annonce', 'a')                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['CMembre'] = $query2->select('COUNT(a1)')                ->from('TuniAnnonceBundle:Membre', 'a1')                ->getQuery()                ->getSingleScalarResult();        $query = $em->createQueryBuilder();        $idp = $query->select('a2.id')                ->from('TuniAdminBundle:StatutMembre', 'a2')                ->where($query->expr()->like('a2.statut', $query->expr()->literal('%Particulier%')))                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['CMembrePart'] = $query2->select('COUNT(a3)')                ->from('TuniAnnonceBundle:Membre', 'a3')                ->where("a3.statutMembre = $idp")                ->getQuery()                ->getSingleScalarResult();        $idp = $query->where($query->expr()->like('a2.statut', $query->expr()->literal('%Prof%')))                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['CMembreProf'] = $query2->select('COUNT(a7)')                ->from('TuniAnnonceBundle:Membre', 'a7')                ->where("a7.statutMembre = $idp")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['AnnonceAtt'] = $query2->select('COUNT(a9)')                ->from('TuniAnnonceBundle:Annonce', 'a9')                ->where("a9.statutAnnonce = 1")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['AnnonceValid'] = $query2->select('COUNT(a10)')                ->from('TuniAnnonceBundle:Annonce', 'a10')                ->where("a10.statutAnnonce = 2")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['AnnonceRefuse'] = $query2->select('COUNT(a11)')                ->from('TuniAnnonceBundle:Annonce', 'a11')                ->where("a11.statutAnnonce = 3")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['AnnonceExpire'] = $query2->select('COUNT(a12)')                ->from('TuniAnnonceBundle:Annonce', 'a12')                ->where("a12.statutAnnonce = 4")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['AnnonceAttRen'] = $query2->select('COUNT(a13)')                ->from('TuniAnnonceBundle:Annonce', 'a13')                ->where("a13.statutAnnonce = 5")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['MembreNew'] = $query2->select('COUNT(a14)')                ->from('TuniAnnonceBundle:Membre', 'a14')                ->where("a14.registredUser >= '" . date("Y-m", time()) . "-01'")                ->getQuery()                ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $stats['AnnonceNew'] = $query2->select('COUNT(a15)')                ->from('TuniAnnonceBundle:Annonce', 'a15')                ->where("a15.dateAnnonce >= '" . date("Y-m", time()) . "-01'")                ->getQuery()                ->getSingleScalarResult();        $d = new DateTime(date("Y-m-d", time()));        $end = $d->format('Y-m-d');        $query22 = $em->createQueryBuilder();        $query2 = $em->createQueryBuilder();//           $AnnoncesLast2week=$query2->select('a16')//              ->from('TuniAnnonceBundle:Annonce', 'a16')//             ->where("a16.dateAnnonce >= '".$d->sub(date_interval_create_from_date_string('14 days'))->format('Y-m-d')."'")//              ->getQuery()//              ->getResult();        $deb = $d->sub(date_interval_create_from_date_string('13 days'))->format('Y-m-d');        $stats['deb'] = date_timestamp_get(new DateTime($deb)) . "000";        $data1 = array();        $query22->select('COUNT(a17)')                ->from('TuniAnnonceBundle:Annonce', 'a17')        ;        while (strcmp($deb, $end) <= 0) {            //       echo $deb.'/'.$end.'<br>';            $c = $query22->where("a17.dateAnnonce = '" . $deb . "'")                    ->getQuery()                    ->getSingleScalarResult();            $data1[] = "" . date_timestamp_get(new DateTime($deb)) . "000," . $c;            $datedeb = new DateTime($deb);            $deb = $datedeb->add(date_interval_create_from_date_string('1 days'))->format('Y-m-d');        }        $stats['AnnonceHist'] = implode("],[", $data1);        $datedeb = new DateTime($end);        $deb = $datedeb->sub(date_interval_create_from_date_string('1 days'))->format('Y-m-d');        $stats['deb24h'] = date_timestamp_get(new DateTime($deb)) . "000";        $datedeb = new DateTime($deb);        $deb = $datedeb->sub(date_interval_create_from_date_string('5 days'))->format('Y-m-d');        $stats['deb7d'] = date_timestamp_get(new DateTime($deb)) . "000";        $stats['end'] = date_timestamp_get(new DateTime($end)) . "000";//           var_dump(implode("],[", $data1));//           echo '<BR>';        //  var_dump($stats);//                   // die();        //$sessions->set('_security.logout.target', "/admins/".$request->query->get('locale')."/Administrateur/connexion");        //$sessions->set('_security.logout.path', "/admins/".$request->query->get('locale')."/Administrateur/connexion");        return $this->render('TuniAdminBundle:Default:index.html.twig', array('page' => 'index', 'stats' => $stats));    }    /**     * Lists all Admins entities.     *     * @Route("/listeAdmins", name="tuni_admin_liste_admins")     * @Template()     */    public function listeAdminsAction() {        $em = $this->getDoctrine()->getEntityManager();        $query = $em->createQueryBuilder();        $query->from('TuniAdminBundle:Utilisateur', 'f')                ->where($query->expr()->like('f.roles', $query->expr()->literal('%ADMIN%')))                ->getQuery();        $total = $query->select('COUNT(f)')                ->getQuery()                ->getSingleScalarResult();        /*  $adapter = new DoctrineOrmAdapter($query2);          $pager = new Pager($adapter, array('page' => $p, 'limit' => 1));          //$entities = $em->getRepository('TuniAdminBundle:Utilisateur')->findAll();          return $this->render('TuniAdminBundle:Default:listeAdmins.html.twig',array('page'=>'Administrators','pager' => $pager,'total' => $total));         */        $query2 = $em->createQueryBuilder();        $query2->select('a')                ->from('TuniAdminBundle:Utilisateur', 'a')                ->where($query->expr()->like('a.roles', $query->expr()->literal('%ADMIN%')))                ->getQuery();        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query2, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */        );        // parameters to template        return $this->render('TuniAdminBundle:Default:listeAdmins.html.twig', array('page' => 'Administrators', 'pagination' => $pagination, 'total' => $total));    }    /**     * edite a  demande.     *     * @Route("/delete/{id}", name="tuni_admin_admins_delete")     * @Method("post")     *     * @Template()     */    public function deleteAction($id) {        $em = $this->getDoctrine()->getEntityManager();        $Utilisateur = $em->find('TuniAdminBundle:Utilisateur', $id);        if (!$Utilisateur) {            throw $this->createNotFoundException('Unable to find Utilisateur entity.');        }        $em->remove($Utilisateur);        $em->flush();        // die('ok '.$id);        $this->get('session')->setFlash(                'notice', 'L\'utilisateur a été supprimé avec succée'        );        return $this->redirect($this->generateUrl('tuni_admin_liste_admins'));    }    /**     * edite a  demande.     *     * @Route("/deleteliste", name="tuni_admin_admins_deleteliste")     * @Method("post")     *     * @Template()     */    public function deletelisteAction() {        $request = $this->get('request');        if ($request->isXMLHttpRequest()) {            //if ('POST' == $request->getMethod())            $response = new Response();            $em = $this->getDoctrine()->getEntityManager();            $exist = FALSE;            $repository = $this->getDoctrine()                    ->getEntityManager()                    ->getRepository('TuniAdminBundle:Utilisateur');            $Utilisateurs = $repository->findAll();            foreach ($Utilisateurs as $Utilisateur) {                if (array_key_exists('admin_' . $Utilisateur->getId(), $_POST)) {//                      $response->setContent('grid-selected-'.$Dossier->getId());//                        return $response;  //                        die('grid-selected-'.$Utilisateur->getId());////                    if (!$Utilisateur  ) {//                        throw $this->createNotFoundException('Unable to find Utilisateur entity.');//                    }                    if ($_POST['admin_' . $Utilisateur->getId()]) {                        $em->remove($Utilisateur);                        $em->flush();                        $exist = TRUE;                    }                }            }            //$this->setFlash('fos_user_success', 'registration.flash.user_created');            // die('ok '.$id);            //        //  return $this->redirect($this->generateUrl('tuni_admin_liste_admins'));            $this->get('session')->setFlash(                    'notice', 'Pas d\'utilisateur à supprimer!'            );            if ($exist)                $this->get('session')->setFlash(                        'notice', 'Les utilisateur ont été supprimés avec succée'                );            //$response->setContent('');            return $response;        }    }    public function editAdminAction($id) {        $em = $this->getDoctrine()->getManager();        $user = $em->getRepository('TuniAdminBundle:Utilisateur')->find($id);        $form = $this->createForm(new \Tuni\UserBundle\Form\Type\ModifyUserFormType(), $user);        return $this->render('TuniAdminBundle:Default:editAdmin.html.twig', array(                    'form' => $form->createView(),                    'user' => $user,                    'page' => 'add_Administrator',        ));    }    public function updateAction() {        $em = $this->getDoctrine()->getEntityManager();        $userModifyType = new \Tuni\UserBundle\Form\Type\ModifyUserFormType(); // instancie le formulaire pour pouvoir utiliser getName() plus loin        $request = $this->getRequest();        $reqUser = $request->request->get($userModifyType->getName());        //$user = $this->get('security.context')->getToken()->getUser();	// récupération de l'utilisateur courant        $id = intval($request->request->get("id"));        $email = $reqUser["email"];        $user = $em->find('TuniAdminBundle:Utilisateur', $id);        $username = $user->getUsernameCanonical();        $ancienMdp = $user->getPassword();        $editForm = $this->createForm($userModifyType, $user);        $query = $em->createQuery('SELECT a.id FROM TuniAdminBundle:Utilisateur a WHERE a.id <> ' . $id . ' AND a.email =\'' . $email . '\'');        $resultats = $query->getResult();        //var_dump($resultats);        if (count($resultats)) {            $this->get('session')->setFlash(                    'notice', ' ERREUR ,Compte existe déjas avec l\'email ' . $user->getEmail() . ' ! '            );            return $this->editAdminAction($id);        }        // gestion du changement -ou non- de mot de passe        $isNewPassword = ($reqUser['password']['first'] == '') ? false : true;        if (!$isNewPassword) {            // réinjection de l'ancien mot de passe dans la requête            $reqUser['password'] = $ancienMdp;            $request->request->set($userModifyType->getName(), $reqUser);        }        $editForm->bindRequest($request);        if ($editForm->isValid()) {            $userManager = $this->container->get('fos_user.user_manager');            $usertemp = $userManager->findUserByUsernameOrEmail($username);            $usertemp->setUsername($user->getUsername());            $usertemp->setEmail($user->getEmail());            if ($isNewPassword) {                $usertemp->setPlainPassword($user->getPassword());            }            $userManager->updateUser($usertemp);            if (!$isNewPassword) {                //$user->setPassword($ancienMdp);                $em->persist($user);                $em->flush();            }            $this->get('session')->setFlash(                    'notice', 'L\'administrateur a été modifié avec succée'            );            return $this->redirect($this->generateUrl('tuni_admin_liste_admins'));        }        $this->get('session')->setFlash(                'notice', ' ERREUR ,Veuillez saisir de nouveau les coordonées de l\'administrateur ! '        );        // la validation n'est pas bonne, on réaffiche le formulaire avec les erreurs        return $this->render('TuniAdminBundle:Default:editAdmin.html.twig', array(                    'user' => $user,                    'form' => $editForm->createView(),                    'page' => 'add_Administrator',        ));    }    public function showAdminAction($id) {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAdminBundle:Utilisateur')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Utilisateur entity.');        }        return $this->render('TuniAdminBundle:Default:showAdmin.html.twig', array(                    'entity' => $entity,                    'page' => 'Administrators'        ));    }    /**     * Lists all Region entities.     *     * @Route("/listRegion/", name="listRegion")     * @Method("GET")     */    public function listRegionAction() {        $em = $this->getDoctrine()->getManager();        $em = $this->getDoctrine()->getEntityManager();        $query = $em->createQueryBuilder();        $query->from('TuniAdminBundle:Ville', 'f')                ->getQuery();        $total = $query->select('COUNT(f)')                ->getQuery()                ->getSingleScalarResult();        $query3 = $em->createQuery("    SELECT a    FROM TuniAdminBundle:Ville a    JOIN a.region v    JOIN v.pays p            ");        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(                $query3, $this->get('request')->query->get('page', 1)/* page number */, 10/* limit per page */        );        // parameters to template        return $this->render('TuniAdminBundle:Default:listRegion.html.twig', array('page' => 'listRegion', 'pagination' => $pagination, 'total' => $total));    }    /**     * Deletes a Ville entity.     *     * @Route("/VilleDel/{id}", name="Ville_deleteReg")     * @Method("GET")     */    public function deleteRegAction(Request $request, $id) {                $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAdminBundle:Ville')->find($id);        $this->get('session')->setFlash(                'notice', 'ERREUR DE SUPPRISSION'        );        if (!$entity) {            $this->get('session')->setFlash(                    'notice', 'La Ville avec id ' . $id . ' introuvable !.'            );            return $this->redirect($this->generateUrl('listRegion'));        }        if($em->getRepository('TuniAnnonceBundle:Annonce')->findOneBy(array('ville'=>$id)))         {$this->get('session')->setFlash(                    'notice', 'Vous pouvez pas supprimer la ville  ' . $entity->getNomV() . ' , elle est utilisé par une annonce !'            );            return $this->redirect($this->generateUrl('listRegion'));                } else {            $em->remove($entity);            $em->flush();            $this->get('session')->setFlash(                'notice', 'La Ville a été supprimé avec succée'        );            }                return $this->redirect($this->generateUrl('listRegion'));    }    /**     * edite a  demande.     *     * @Route("/deletelisteRegion", name="Region_deleteliste")     * @Method("post")     *     * @Template()     */    public function deletelisteRegionAction() {        $request = $this->get('request');        if ($request->isXMLHttpRequest()) {            //if ('POST' == $request->getMethod())            $response = new Response();            $em = $this->getDoctrine()->getEntityManager();            $exist = FALSE;            $repository = $this->getDoctrine()                    ->getEntityManager()                    ->getRepository('TuniAdminBundle:Ville');            $Villes = $repository->findAll();            foreach ($Villes as $Ville) {                if (array_key_exists('admin_' . $Ville->getId(), $_POST)) {                    if ($_POST['admin_' . $Ville->getId()]) {                                                if($em->getRepository('TuniAnnonceBundle:Annonce')->findOneBy(array('ville'=>$Ville->getId())))                         {                             $this->get('session')->setFlash(                                    'notice'.$Ville->getId(), 'Vous pouvez pas supprimer la ville  ' . $Ville->getNomV() . ',il se peut qu\'elle est utilisé par une annonce !'                            );                        } else {                                                      $em->remove($Ville);                            $em->flush();                            $exist = TRUE;                        }                                            }                }            }            $this->get('session')->setFlash(                    'notice', 'Pas de Ville à supprimer!'            );            if ($exist)                $this->get('session')->setFlash(                        'notice', 'Les Villes ont été supprimés avec succée'                );            //$response->setContent('');            return $response;        }    }}