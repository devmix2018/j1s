{% extends "TuniAdminBundle::layout.html.twig" %}
{% block content_middle_b %}

{{parent()}}     
               

	
				
		<ul class="breadcrumb">
	<li><a  class="glyphicons home"><i></i> juste1service</a></li>
	<li class="divider"></li>
	<li>{{'dashboard'|trans({}, 'TuniAdminBundle') }}</li>
</ul>
<div class="separator"></div>

<div class="heading-buttons">
	<h3 class="glyphicons display"><i></i> {{'dashboard'|trans({}, 'TuniAdminBundle') }}</h3>
	
	<div class="clearfix" style="clear: both;"></div>
</div>
<div class="separator"></div>

<div class="menubar">
	
</div>

<div class="innerLR">
	<div class="row-fluid">
		<div class="span4">
			<div class="widget widget-4">
				<div class="widget-head">
					<h4 class="heading">Activité</h4>
					
				</div>
				<div class="widget-body list">
					<ul>
						<li>
							<span>Dés début du mois courrant</span>
							
						</li>
					</ul>
				</div>
			</div>
		</div>
		<div class="span8">
			<div class="row-fluid">
								<div class="span4">
					<a href="" class="widget-stats">
						<span class="glyphicons user_add"><i></i></span>
						<span class="txt"><strong>{{stats['MembreNew']}}</strong>Membres</span>
						<div class="clearfix"></div>
					</a>
				</div>
								<div class="span4">
					<a href="" class="widget-stats">
						<span class="glyphicons eye_open"><i></i></span>
						<span class="txt"><strong>0</strong>Visiteurs</span>
						<div class="clearfix"></div>
					</a>
				</div>
								<div class="span4">
					<a href="" class="widget-stats">
						<span class="glyphicons cargo"><i></i></span>
						<span class="txt"><strong>{{stats['AnnonceNew']}}</strong>Annonces</span>
						<div class="clearfix"></div>
					</a>
				</div>
							</div>
		</div>
	</div>
</div>
<div class="separator"></div>
<br/>

<div class="innerLR">
<div class="row-fluid">
	
	<div class="span6">
                <h4 class="glyphicons clock"><i></i> Annonces</h4>
		<div class="separator"></div>
		<div class="btn-group btn-group-vertical block">
			<a class="btn btn-icon btn-default btn-block glyphicons cargo count"><i></i> <span>{{stats['CAnn']}}</span>Total annonces</a>
			<a class="btn btn-icon btn-info btn-block glyphicons restart count"><i></i> <span>{{stats['AnnonceAtt']}}</span>En Attente</a>
			<a class="btn btn-icon btn-success btn-block glyphicons circle_ok count"><i></i> <span>{{stats['AnnonceValid']}}</span>Validé</a>
			<a class="btn btn-icon btn-default btn-block glyphicons circle_remove count"><i></i> <span>{{stats['AnnonceRefuse']}}</span>Refusé</a>
                        <a class="btn btn-icon btn-warning btn-block glyphicons clock count"><i></i> <span>{{stats['AnnonceExpire']}}</span>Expiré</a>
                        <a class="btn btn-icon btn-primary btn-block glyphicons repeat count"><i></i> <span>{{stats['AnnonceAttRen']}}</span>Attente Renouvelement</a>

		</div>
	</div><div class="span6">
		<h4 class="glyphicons clock"><i></i> Utilisateurs</h4>
		<div class="separator"></div>
		<div class="btn-group btn-group-vertical block">
			<a class="btn btn-icon btn-default btn-block glyphicons group count"><i></i> <span>{{stats['CMembre']}}</span>Total users</a>
			<a class="btn btn-icon btn-default btn-block glyphicons user_add count"><i></i> <span>{{stats['CMembrePart']}}</span>Jobeur</a>
                        <a class="btn btn-icon btn-default btn-block glyphicons old_man count"><i></i> <span>{{stats['CMembreProf']}}</span>Employeur</a>
			
		</div>
	</div>
</div>
</div>
<div class="separator bottom"></div>

<div class="widget widget-2 widget-tabs widget-tabs-2">
	<div class="widget-head">
		<ul>
			<li class="active"><a class="glyphicons cardio" href="#website-traffic-tab" data-toggle="tab"><i></i>juste1service Traffic</a></li>
			
		</ul>
	</div>
	<div class="widget-body">
		<div class="tab-pane active" id="website-traffic-tab">
			<div class="btn-group separator bottom pull-right">
				<button id="websiteTraffic24Hours" class="btn btn-small btn-default">24 Heurs</button>
				<button id="websiteTraffic7Days" class="btn btn-small btn-default">7 Jours</button>
				<button id="websiteTraffic14Days" class="btn btn-small btn-default">14 Jours</button>
				<button id="websiteTrafficClear" class="btn btn-small btn-default" >Clear</button>
			</div>
			<div class="clearfix" style="clear: both;"></div>
			<div id="placeholder" style="height: 200px;"></div>
			<div id="overview" style="height: 40px;"></div>
		</div>
	</div>
</div>




<br/>		
				<!-- End Content -->
		
		<!-- End Wrapper -->
		
		
{% endblock %}
                {% block javascripts %}
{{parent()}}
       
{%if (page == 'index')%} 
		<!--  Flot (Charts) JS -->
	<script src="{{asset('bundles/tuniadmin/theme/scripts/flot/jquery.flot.js') }}" type="text/javascript"></script>
	<script src="{{asset('bundles/tuniadmin/theme/scripts/flot/jquery.flot.pie.js') }}" type="text/javascript"></script>
	<script src="{{asset('bundles/tuniadmin/theme/scripts/flot/jquery.flot.tooltip.js') }}" type="text/javascript"></script>
	<script src="{{asset('bundles/tuniadmin/theme/scripts/flot/jquery.flot.selection.js') }}"></script>
	<script src="{{asset('bundles/tuniadmin/theme/scripts/flot/jquery.flot.resize.js') }}" type="text/javascript"></script>
	<script src="{{asset('bundles/tuniadmin/theme/scripts/flot/jquery.flot.orderBars.js') }}" type="text/javascript"></script>
	
		
	<script>
	var charts = 
	{
		// init all charts
		init: function()
		{
						// mark weekends on the website traffic main graph
			this.website_traffic_graph.options.markings = this.utility.weekendAreas;

			// init website traffic main graph
			this.website_traffic_graph.init();

			// init website traffic toolbar
			this.utility.website_traffic_toolbar();

			// init website traffic overview graph
			this.website_traffic_overview.init();

			
			

			// connect website traffic graphs
			this.utility.website_traffic_connect();

			
											},

		// utility class
		utility:
		{
			chartColors: [ "#37a6cd", "#444", "#777", "#999", "#DDD", "#EEE" ],
			chartBackgroundColors: ["#fff", "#fff"],

			applyStyle: function(that)
			{
				that.options.colors = charts.utility.chartColors;
				that.options.grid.backgroundColor = { colors: charts.utility.chartBackgroundColors };
				that.options.grid.borderColor = charts.utility.chartColors[0];
				that.options.grid.color = charts.utility.chartColors[0];
			},
			
						// connect website_traffic_graph with website_traffic_overview
			website_traffic_connect: function()
			{
				$("#placeholder").bind("plotselected", function (event, ranges) 
				{
			        // do the zooming // rewrite chart object
			        charts.website_traffic_graph.plot = $.plot(
						$("#placeholder"), 
						[{ data: charts.website_traffic_graph.d2, label: "Annonces" }],
						$.extend(true, {}, charts.website_traffic_graph.options, {
			            	xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
						})
					);

			        // don't fire event on the overview to prevent eternal loop
			        charts.website_traffic_overview.plot.setSelection(ranges, true);

			     	// enable website traffic clear selection button
			    	$('#websiteTrafficClear').prop('disabled', false);
			    });
			    
			    $("#overview").bind("plotselected", function (event, ranges) 
				{
					// set selection
			    	charts.website_traffic_graph.plot.setSelection(ranges);

			    	// enable website traffic clear selection button
			    	$('#websiteTrafficClear').prop('disabled', false);
			    });
			},

			website_traffic_toolbar: function()
			{
				// clear selection button
				$("#websiteTrafficClear").click(function()
				{
					charts.utility.website_traffic_clear();
				});

				// last 24 hours button
				$('#websiteTraffic24Hours').click(function()
				{
					charts.website_traffic_graph.plot.setSelection(
					{
						xaxis: 
						{
							from: {{stats['deb24h']}},
							to: {{stats['end']}}						}
					});
				});

				// last 7 days button
				$('#websiteTraffic7Days').click(function()
				{
					charts.website_traffic_graph.plot.setSelection(
					{
						xaxis: 
						{
							from: {{stats['deb7d']}},
							to: {{stats['end']}}						}
					});
				});

				// last 14 days button
				$('#websiteTraffic14Days').click(function()
				{
					charts.website_traffic_graph.plot.setSelection(
					{
						xaxis: 
						{
							from: {{stats['deb']}},
							to: {{stats['end']}}						}
					});
				});
			},
			

			// clear selection on website traffic charts
			website_traffic_clear: function()
			{
				// disable clear button
				$('#websiteTrafficClear').prop('disabled', false);
				
				// clear selection on website traffic main chart / rewrite chart object
				charts.website_traffic_graph.plot = $.plot(
					$("#placeholder"), 
					[{ data: charts.website_traffic_graph.d2, label: "Annonces" }],
					charts.website_traffic_graph.options
				);

				// clear selection on website traffic overview chart
				charts.website_traffic_overview.plot.clearSelection();
			},
			
			// helper for returning the weekends in a period
			weekendAreas: function(axes)
			{
				var markings = [];
		        var d = new Date(axes.xaxis.min);
		        // go to the first Saturday
		        d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
		        d.setUTCSeconds(0);
		        d.setUTCMinutes(0);
		        d.setUTCHours(0);
		        var i = d.getTime();
		        do {
		            // when we don't set yaxis, the rectangle automatically
		            // extends to infinity upwards and downwards
		            markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
		            i += 7 * 24 * 60 * 60 * 1000;
		        } while (i < axes.xaxis.max);
		
		        return markings;
			},
						
			// generate random number for charts
			randNum: function()
			{
				return (Math.floor( Math.random()* (1+40-20) ) ) + 20;
			}
		},

				// main website traffic chart
		website_traffic_graph:
		{
			// data
			d2: [[{{stats['AnnonceHist']}}]],
			
			// will hold the chart object
			plot: null,
			
			// chart options
			options:
			{
		        xaxis: { mode: "time", tickLength: 5 },
		        selection: { mode: "x" },
		        grid: { 
			        markingsColor: "rgba(0,0,0, 0.02)",
			        backgroundColor : { },
					borderColor : "#f1f1f1",
					borderWidth: 0,
					color : "#DA4C4C",
					hoverable : true,
					clickable: true
			    },
		        series : {
					lines : {
						show : true,
						fill: true
					},
					points : {
						show : true
					}
				},
				colors: [],
				tooltip: true,
				tooltipOpts: {
					content: "%x: <strong>%y %s</strong>",
					dateFormat: "%y-%0m-%0d",
					shifts: {
						x: 10,
						y: 20
					},
					defaultTheme: false
				},
				legend: {
			        show: true,
			        noColumns: 2
			    }
		    },

		 	// initialize
			init: function()
			{
				// apply styling
				charts.utility.applyStyle(this);
				
				// first correct the timestamps - they are recorded as the daily
			    // midnights in UTC+0100, but Flot always displays dates in UTC
			    // so we have to add one hour to hit the midnights in the plot
			    for (var i = 0; i < this.d2.length; ++i)
			    {
			    	this.d2[i][0] += 60 * 60 * 1000;
			    	
			    }

				// create the chart object
			    this.plot = $.plot(
					$("#placeholder"), 
					[{ data: this.d2, label: "Annonces" }], 
					this.options
				);
			}
		},
                        website_traffic_overview: 
		{
			// data
			d2: [[{{stats['AnnonceHist']}}]],
			
			// will hold the chart object
			plot: null,

			// chart options
			options: 
			{
		        series: {
			        /*
		            bars: {
						show: true,
	                    lineWidth: 35,
	                    align: "left"
					},
					*/
					lines: { show: true, lineWidth: 1, fill: true },
	                shadowSize: 0
		        },
		        xaxis: { ticks: [], mode: "time" },
		        yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
		        selection: { mode: "x" },
		        grid: {
		        	borderColor : "#DA4C4C",
		        	borderWidth: 0,
		        	minBorderMargin: 0,
		        	axisMargin: 0,
		        	labelMargin: 0,
		        	margin: 0,
		        	backgroundColor : {}
			    },
			    colors: [],
			    legend: {
			        show: false
			    }
		    },

			// initialize
			init: function()
			{
				// apply styling
				charts.utility.applyStyle(this);
				
				// first correct the timestamps - they are recorded as the daily
			    // midnights in UTC+0100, but Flot always displays dates in UTC
			    // so we have to add one hour to hit the midnights in the plot
			    for (var i = 0; i < this.d2.length; ++i)
			    {
			    	
			    	this.d2[i][0] += 60 * 60 * 1000;
			    }

			    // create chart object
			    this.plot = $.plot(
					$("#overview"), 
					[{ data: this.d2, label: "Annonces" }], 
					this.options
				);
			}
		},

		

		
							};

	$(function()
	{
		// initialize charts
		charts.init();
	});
	</script>
	{%endif%}
{% endblock %}	                